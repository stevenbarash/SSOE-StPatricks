{"ast":null,"code":"var _jsxFileName = \"/Users/stevenbarash/Developer/SSOE-StPatty/ssoe-stpatty/src/App.js\";\nimport React, { Component } from 'react';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      guessedLetters: [],\n      correctLetters: [],\n      currentWheelValue: 0.0\n    };\n    this.spinWheel = this.spinWheel.bind(this);\n  }\n\n  spinWheel() {\n    console.log(Math.random * 10); //spin wheel, set state to what the wheel is at\n\n    this.setState({\n      currentWheelValue: Math.floor(Math.random * 10)\n    }); //do UI stuff, make spin random\n  }\n\n  checkGuess() {\n    //prompt user for a guess, check if the letter was already guessed.\n    // if not, then it checks if it is in the correct letters array\n    // adds/subtracts score based on current wheel value depending on correct/incorrect answer\n    var guess = prompt(\"test\").toLowerCase();\n\n    if (this.state.guessedLetters.includes(guess)) {\n      alert(\"You already guessed this\");\n      this.checkGuess();\n    } else {\n      if (this.state.correctLetters.includes(guess)) {\n        this.state.score = this.addToBoard(guess);\n      } else {\n        var newScore = this.state.score - this.state.currentWheelValue;\n        this.setState({\n          score: newScore\n        });\n      }\n    }\n  }\n\n  addToBoard(correctLetter) {//adds letter to board\n    // check at the end if all letters are added, disable spin button\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.spinWheel(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Press\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.state.currentWheelValue.toString()));\n  }\n\n}","map":{"version":3,"sources":["/Users/stevenbarash/Developer/SSOE-StPatty/ssoe-stpatty/src/App.js"],"names":["React","Component","App","constructor","props","state","score","guessedLetters","correctLetters","currentWheelValue","spinWheel","bind","console","log","Math","random","setState","floor","checkGuess","guess","prompt","toLowerCase","includes","alert","addToBoard","newScore","correctLetter","render","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AACzCE,EAAAA,WAAW,CAACC,KAAD,EAAO;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAC,CADK;AAEXC,MAAAA,cAAc,EAAC,EAFJ;AAGXC,MAAAA,cAAc,EAAC,EAHJ;AAIXC,MAAAA,iBAAiB,EAAC;AAJP,KAAb;AAMI,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AAEL;;AACDD,EAAAA,SAAS,GAAE;AACHE,IAAAA,OAAO,CAACC,GAAR,CAAaC,IAAI,CAACC,MAAL,GAAY,EAAzB,EADG,CAGT;;AACE,SAAKC,QAAL,CAAc;AACZP,MAAAA,iBAAiB,EAAGK,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACC,MAAL,GAAY,EAAvB;AADR,KAAd,EAJO,CAST;AAED;;AAGDG,EAAAA,UAAU,GAAE;AACV;AACA;AACA;AACA,QAAIC,KAAK,GAAGC,MAAM,CAAC,MAAD,CAAN,CAAeC,WAAf,EAAZ;;AAEA,QAAG,KAAKhB,KAAL,CAAWE,cAAX,CAA0Be,QAA1B,CAAmCH,KAAnC,CAAH,EAA6C;AAC3CI,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACA,WAAKL,UAAL;AACD,KAHD,MAII;AACF,UAAG,KAAKb,KAAL,CAAWG,cAAX,CAA0Bc,QAA1B,CAAmCH,KAAnC,CAAH,EAA6C;AAC3C,aAAKd,KAAL,CAAWC,KAAX,GACA,KAAKkB,UAAL,CAAgBL,KAAhB,CADA;AAED,OAHD,MAII;AACF,YAAIM,QAAQ,GAAG,KAAKpB,KAAL,CAAWC,KAAX,GAAmB,KAAKD,KAAL,CAAWI,iBAA7C;AAEA,aAAKO,QAAL,CAAc;AAACV,UAAAA,KAAK,EAACmB;AAAP,SAAd;AACD;AACF;AAEF;;AAGDD,EAAAA,UAAU,CAACE,aAAD,EAAe,CACvB;AACA;AAGD;;AAECC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKjB,SAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKL,KAAL,CAAWI,iBAAX,CAA6BmB,QAA7B,EAAL,CAFF,CADF;AAMD;;AAjEwC","sourcesContent":["import React, { Component } from 'react'\n\nexport default class App extends Component {\n  constructor(props){\n  super(props)\n  this.state = {\n    score:0,\n    guessedLetters:[],\n    correctLetters:[],\n    currentWheelValue:0.0\n  }\n      this.spinWheel = this.spinWheel.bind(this);\n\n}\nspinWheel(){\n        console.log((Math.random*10))\n\n  //spin wheel, set state to what the wheel is at\n    this.setState({\n      currentWheelValue : Math.floor(Math.random*10)\n    })\n  \n\n  //do UI stuff, make spin random\n\n}\n\n\ncheckGuess(){\n  //prompt user for a guess, check if the letter was already guessed.\n  // if not, then it checks if it is in the correct letters array\n  // adds/subtracts score based on current wheel value depending on correct/incorrect answer\n  var guess = prompt(\"test\").toLowerCase()\n\n  if(this.state.guessedLetters.includes(guess)){\n    alert(\"You already guessed this\")\n    this.checkGuess()\n  }\n  else{\n    if(this.state.correctLetters.includes(guess)){\n      this.state.score = \n      this.addToBoard(guess)\n    }\n    else{\n      var newScore = this.state.score - this.state.currentWheelValue\n\n      this.setState({score:newScore})\n    }\n  }\n\n}\n\n\naddToBoard(correctLetter){\n  //adds letter to board\n  // check at the end if all letters are added, disable spin button\n\n\n}\n\n  render() {\n    return (\n      <div>\n        <button onClick={()=>this.spinWheel()}>Press</button>\n        <h1>{this.state.currentWheelValue.toString()}</h1>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}