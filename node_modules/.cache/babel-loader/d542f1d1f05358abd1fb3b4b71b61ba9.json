{"ast":null,"code":"var _jsxFileName = \"/Users/stevenbarash/Developer/SSOE-StPatty/ssoe-stpatty/src/App.js\";\nimport React, { Component } from 'react';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      guessedLetters: [],\n      correctLetters: ['H', 'A', 'P', 'Y', 'S', 'T', 'D', 'F', 'R', 'O', 'M', 'W', 'N'],\n      currentWheelValue: 0.0\n    };\n    this.spinWheel = this.spinWheel.bind(this);\n  }\n\n  spinWheel() {\n    // console.log((Math.random*10))\n    //spin wheel, set state to what the wheel is at\n    this.setState({\n      currentWheelValue: 500\n    }); // if(this.state.currentWheelValue!== 0){\n    // }\n    //do UI stuff, make spin random\n  }\n\n  checkGuess() {\n    this.spinWheel(); //prompt user for a guess, check if the letter was already guessed.\n    // if not, then it checks if it is in the correct letters array\n    // adds/subtracts score based on current wheel value depending on correct/incorrect answer\n\n    var guess = prompt(\"test\").toUpperCase();\n\n    if (this.state.guessedLetters.includes(guess)) {\n      alert(\"You already guessed this\");\n      this.checkGuess();\n    } else {\n      if (this.state.correctLetters.includes(guess)) {\n        this.setState({\n          score: this.state.score + this.state.currentWheelValue\n        });\n        this.setState({}); // this.addToBoard(guess)\n      } else {\n        var newScore = this.state.score - this.state.currentWheelValue;\n        this.setState({\n          score: newScore\n        });\n      }\n    }\n  }\n\n  addToBoard(correctLetter) {//adds letter to board\n    // check at the end if all letters are added, disable spin button\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.checkGuess(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Press\"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.currentWheelValue.toString()), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.score));\n  }\n\n}","map":{"version":3,"sources":["/Users/stevenbarash/Developer/SSOE-StPatty/ssoe-stpatty/src/App.js"],"names":["React","Component","App","constructor","props","state","score","guessedLetters","correctLetters","currentWheelValue","spinWheel","bind","setState","checkGuess","guess","prompt","toUpperCase","includes","alert","newScore","addToBoard","correctLetter","render","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;AACzCE,EAAAA,WAAW,CAACC,KAAD,EAAO;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAC,CADK;AAEXC,MAAAA,cAAc,EAAC,EAFJ;AAGXC,MAAAA,cAAc,EAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,CAHJ;AAIXC,MAAAA,iBAAiB,EAAC;AAJP,KAAb;AAMI,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AAEL;;AACDD,EAAAA,SAAS,GAAE;AACH;AAEN;AACE,SAAKE,QAAL,CAAc;AACZH,MAAAA,iBAAiB,EAAG;AADR,KAAd,EAJO,CASP;AAEA;AAEF;AAED;;AAGDI,EAAAA,UAAU,GAAE;AACV,SAAKH,SAAL,GADU,CAEV;AACA;AACA;;AACA,QAAII,KAAK,GAAGC,MAAM,CAAC,MAAD,CAAN,CAAeC,WAAf,EAAZ;;AAEA,QAAG,KAAKX,KAAL,CAAWE,cAAX,CAA0BU,QAA1B,CAAmCH,KAAnC,CAAH,EAA6C;AAC3CI,MAAAA,KAAK,CAAC,0BAAD,CAAL;AACA,WAAKL,UAAL;AACD,KAHD,MAII;AACF,UAAG,KAAKR,KAAL,CAAWG,cAAX,CAA0BS,QAA1B,CAAmCH,KAAnC,CAAH,EAA6C;AAC3C,aAAKF,QAAL,CAAc;AACZN,UAAAA,KAAK,EAAG,KAAKD,KAAL,CAAWC,KAAX,GAAmB,KAAKD,KAAL,CAAWI;AAD1B,SAAd;AAGA,aAAKG,QAAL,CAAc,EAAd,EAJ2C,CAO3C;AACD,OARD,MASI;AACF,YAAIO,QAAQ,GAAG,KAAKd,KAAL,CAAWC,KAAX,GAAmB,KAAKD,KAAL,CAAWI,iBAA7C;AAEA,aAAKG,QAAL,CAAc;AAACN,UAAAA,KAAK,EAACa;AAAP,SAAd;AACD;AACF;AAEF;;AAGDC,EAAAA,UAAU,CAACC,aAAD,EAAe,CACvB;AACA;AAGD;;AAECC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,MAAI,KAAKT,UAAL,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKR,KAAL,CAAWI,iBAAX,CAA6Bc,QAA7B,EAAL,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKlB,KAAL,CAAWC,KAAhB,CAHF,CADF;AAOD;;AA5EwC","sourcesContent":["import React, { Component } from 'react'\n\nexport default class App extends Component {\n  constructor(props){\n  super(props)\n  this.state = {\n    score:0,\n    guessedLetters:[],\n    correctLetters:['H', 'A', 'P', 'Y', 'S', 'T', 'D', 'F', 'R', 'O', 'M', 'W', 'N'],\n    currentWheelValue:0.0\n  }\n      this.spinWheel = this.spinWheel.bind(this);\n\n}\nspinWheel(){\n        // console.log((Math.random*10))\n\n  //spin wheel, set state to what the wheel is at\n    this.setState({\n      currentWheelValue : 500\n    })\n\n  \n    // if(this.state.currentWheelValue!== 0){\n\n    // }\n\n  //do UI stuff, make spin random\n\n}\n\n\ncheckGuess(){\n  this.spinWheel()\n  //prompt user for a guess, check if the letter was already guessed.\n  // if not, then it checks if it is in the correct letters array\n  // adds/subtracts score based on current wheel value depending on correct/incorrect answer\n  var guess = prompt(\"test\").toUpperCase()\n\n  if(this.state.guessedLetters.includes(guess)){\n    alert(\"You already guessed this\")\n    this.checkGuess()\n  }\n  else{\n    if(this.state.correctLetters.includes(guess)){\n      this.setState({\n        score : this.state.score + this.state.currentWheelValue\n      })\n      this.setState({\n\n      })\n      // this.addToBoard(guess)\n    }\n    else{\n      var newScore = this.state.score - this.state.currentWheelValue\n\n      this.setState({score:newScore})\n    }\n  }\n\n}\n\n\naddToBoard(correctLetter){\n  //adds letter to board\n  // check at the end if all letters are added, disable spin button\n\n\n}\n\n  render() {\n    return (\n      <div>\n        <button onClick={()=>this.checkGuess()}>Press</button>\n        <h1>{this.state.currentWheelValue.toString()}</h1>\n        <h1>{this.state.score}</h1>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}